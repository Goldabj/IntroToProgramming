"""
The Python Capstone Project.

CSSE 120 - Introduction to Software Development.
Team members: Brendan Goldacker, Scott Reiter, and Alan Yates.

The primary author of this module is: Alan Yates.
"""
# DONE: Put the names of ALL team members in the above where indicated.
#       Put YOUR NAME in the above where indicated.

import m0
import m1
import m2
import m4

import tkinter
from tkinter import ttk
import new_create
import time


def main():
    """
    Tests functions in this module.
    Intended to be used internally by the primary author of this module.
    """
    print('-------------------------------')
    print('Testing functions in module m3:')
    print('-------------------------------')

    root = tkinter.Tk()
    dc = m0.DataContainer

    frame1 = m1.my_frame(root, dc)
    frame1.grid()

    frame2 = m2.my_frame(root, dc)
    frame2.grid()

    frame3 = my_frame(root, dc)
    frame3.grid()

    root.mainloop()

def my_frame(root, dc):
    """
    Constructs and returns a Frame (on the given root window)
    that contains this module's widgets.
    Also sets up callbacks for this module's widgets.

    Preconditions:
      :type root: tkinter.Tk
      :type dc: m0.DataContainer
      :type speed_entry: int
    """

    robot = m0.DataContainer

    frame = ttk.Frame(root, padding=30, relief='raised')

    speed_label = ttk.Label(frame, text='robot speed:')
    speed_entry = ttk.Entry(frame, width=10)
    dist_label = ttk.Label(frame, text='N centimeters:')
    dist_entry = ttk.Entry(frame, width=10)
    speed_label.grid(column=0, row=0)
    speed_entry.grid(column=1, row=0)
    dist_label.grid(column=0, row=1)
    dist_entry.grid(column=1, row=1)

    left_button = ttk.Button(frame, text='Left')
    left_button.grid(column=0, row=3)
    left_button['command'] = lambda: move_left(speed_entry, dist_entry, dc)

    right_button = ttk.Button(frame, text='Right')
    right_button.grid(column=2, row=3)
    right_button['command'] = lambda: move_right(speed_entry, dist_entry, dc)

    forward_button = ttk.Button(frame, text='Forward')
    forward_button.grid(column=1, row=2)
    forward_button['command'] = lambda: move_N_cm(speed_entry, dist_entry, dc)

    backwards_button = ttk.Button(frame, text='Backward')
    backwards_button.grid(column=1, row=4)
    backwards_button['command'] = lambda: move_backwards(speed_entry, dist_entry, dc)

    turn_around_button = ttk.Button(frame, text='Turn Around')
    turn_around_button.grid(column=1, row=3)
    turn_around_button['command'] = lambda: turn_around_and_move(speed_entry, dist_entry, dc)
#----------------------------------

#-----Waypoints--------------------
    waypoints_label = ttk.Label(frame, text='Enter waypoint:')
    waypoints_entry_button = ttk.Button(frame, text='Enter')
    waypoints_x_entry = ttk.Entry(frame, width=5)
    waypoints_x_label = ttk.Label(frame, text='x coordinate:')
    waypoints_y_entry = ttk.Entry(frame, width=5)
    waypoints_y_label = ttk.Label(frame, text='y coordinate:')
    waypoints_label.grid(column=0, row=7)
    waypoints_entry_button.grid(column=0, row=8)
    waypoints_x_entry.grid(column=1, row=9)
    waypoints_x_label.grid(column=0, row=9)
    waypoints_y_entry.grid(column=1, row=10)
    waypoints_y_label.grid(column=0, row=10)
    waypoints = [(0, 0)]
    waypoints_entry_button['command'] = lambda: enter_waypoints(waypoints_x_entry, waypoints_y_entry, waypoints)
    follow_wp_button = ttk.Button(frame, text='Follow Waypoints')
    follow_wp_button.grid(column=1, row=6)
    follow_wp_button['command'] = lambda: follow_wp(dc, waypoints, speed_entry)
    clear_wp_button = ttk.Button(frame, text='Clear Waypoints')
    clear_wp_button.grid(column=0, row=11)
    clear_wp_button['command'] = lambda: clear_wp(waypoints)
#----------------------------------

#-------Hours Worked Lists---------
    b = open('../process/hours-1.txt', 'r')
    brendan = b.read()
    b.close()
    brendan_label = ttk.Label(frame, text=brendan)
    brendan_label.grid(column=1)

    s = open('../process/hours-2.txt', 'r')
    scott = s.read()
    s.close()
    scott_label = ttk.Label(frame, text=scott)
    scott_label.grid(column=1)

    a = open('../process/hours-3.txt', 'r')
    alan = a.read()
    a.close()
    alan_label = ttk.Label(frame, text=alan)
    alan_label.grid(column=1)

    return frame
#-----------------------------------

#-----Movements-------
def move_N_cm(speed_entry, dist_entry, dc):
    """
    moves robot N centimeters at an entered speed
    """
    speed = int(speed_entry.get())
    dist = int(dist_entry.get())
    t = (dist / speed)

    dc.robot.driveDirect(speed, speed)
    time.sleep(t)
    dc.robot.stop()

def move_left(speed_entry, dist_entry, dc):
    """
    moves robot N centimeters at an entered speed after rotating to the left
    """
    dc.robot.go(0, 90)
    time.sleep(1)
    move_N_cm(speed_entry, dist_entry, dc)

def move_right(speed_entry, dist_entry, dc):
    """
    moves robot N centimeters at an entered speed after rotating to the right
    """
    dc.robot.go(0, -90)
    time.sleep(1)
    move_N_cm(speed_entry, dist_entry, dc)

def turn_around_and_move(speed_entry, dist_entry, dc):
    """
    moves robot N centimeters at an entered speed after turning around
    """
    dc.robot.go(0, -180)
    time.sleep(1)
    move_N_cm(speed_entry, dist_entry, dc)

def move_backwards(speed_entry, dist_entry, dc):
    """
    moves robot N centimeters at an entered speed after turning around
    """
    speed = -1 * int(speed_entry.get())
    dist = int(dist_entry.get())
    t = (dist / abs(speed))

    dc.robot.driveDirect(speed, speed)
    time.sleep(t)
    dc.robot.stop()
#------------------------------------

def enter_waypoints(waypoints_x_entry, waypoints_y_entry, waypoints):
    waypoints.append((int(waypoints_x_entry.get()), int(waypoints_y_entry.get())))
    print(waypoints)
    return waypoints

def clear_wp(waypoints):
    for k in range(len(waypoints) - 1):
        waypoints.pop()
    return waypoints

def follow_wp(dc, waypoints, speed_entry):
    speed = speed_entry.get()
     for k in range(len(waypoints) - 1):


#------Store robots movements-----
# def stored_movements(dc):
#     dis_sensor = new_create.Sensors.distance
#     dis = dc.robot.getSensor(dis_sensor)
#     rad_sensor = new_create.Sensors.radius
#     radius = dc.robot.getSensor(rad_sensor)
#--------------------------------

#----Set Waypoints---------


# ----------------------------------------------------------------------
# If this module is running at the top level (as opposed to being
# imported by another module), then call the 'main' function.
# ----------------------------------------------------------------------
if __name__ == '__main__':
    main()
